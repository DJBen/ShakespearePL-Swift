Lexeme(ShakespeareKit.Token.Lexemes.Other("Prime"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("Number"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("Computation"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("in"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("Copenhagen"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Lexeme(ShakespeareKit.Token.Lexemes.Character("Romeo"))
Other(",")
Lexeme(ShakespeareKit.Token.Lexemes.Other("young"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("man"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("of"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("Verona"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Lexeme(ShakespeareKit.Token.Lexemes.Character("Juliet"))
Other(",")
Lexeme(ShakespeareKit.Token.Lexemes.Other("young"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("woman"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Lexeme(ShakespeareKit.Token.Lexemes.Character("Hamlet"))
Other(",")
Lexeme(ShakespeareKit.Token.Lexemes.Other("temporary"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("variable"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("from"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("Denmark"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Lexeme(ShakespeareKit.Token.Lexemes.Character("The Ghost"))
Other(",")
Lexeme(ShakespeareKit.Token.Lexemes.Other("limiting"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("factor"))
Other("(")
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.Other("by"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("remarkable"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("coincidence"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("also"))
Lexeme(ShakespeareKit.Token.Lexemes.Character("Hamlet"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("\'s"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("father"))
Other(")")
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Act("I", "Interview with the other side.")
Scene("I", "At the last hour before dawn.")
Enter(Set(["The Ghost", "Juliet"]))
Speaking("The Ghost")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Other("pretty"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("little"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("warm"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("thing"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Subtract))
Lexeme(ShakespeareKit.Token.Lexemes.UnaryOperation(ShakespeareKit.Token.Lexemes.UnaryOperationType.Square))
Lexeme(ShakespeareKit.Token.Lexemes.SecondPersonReflexive)
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.SecondPersonPossessive)
Lexeme(ShakespeareKit.Token.Lexemes.Other("golden"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("hair"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
PrintCharacter
Speaking("Juliet")
ScanNumber
Exit(Set(["The Ghost"]))
Enter(Set(["Romeo"]))
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.Other("sunny"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("summer\'s"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("day"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Act("II", "Determining divisibility.")
Scene("I", "A private conversation.")
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.GreaterThan))
Lexeme(ShakespeareKit.Token.Lexemes.Character("The Ghost"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Speaking("Romeo")
ConditionalJump(true, "V")
Exit(Set(["Romeo"]))
Enter(Set(["Hamlet"]))
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.UnaryOperation(ShakespeareKit.Token.Lexemes.UnaryOperationType.SquareRoot))
Lexeme(ShakespeareKit.Token.Lexemes.Character("Romeo"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Speaking("Hamlet")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.Other("red"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("rose"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Scene("II", "Questions and the consequences thereof.")
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.FirstPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.GreaterThan))
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Speaking("Hamlet")
ConditionalJump(true, "III")
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Modulo))
Lexeme(ShakespeareKit.Token.Lexemes.Character("Romeo"))
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.FirstPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.Other("nothing"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Speaking("Hamlet")
ConditionalJump(true, "IV")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Add))
Lexeme(ShakespeareKit.Token.Lexemes.SecondPersonReflexive)
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.Other("roman"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Speaking("Juliet")
Jump("II")
Scene("III", "Romeo must die!")
Exit(Set(["Hamlet"]))
Enter(Set(["Romeo"]))
Speaking("Juliet")
PrintNumber
Exit(Set(["Juliet"]))
Enter(Set(["Hamlet"]))
Speaking("Romeo")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Subtract))
Lexeme(ShakespeareKit.Token.Lexemes.Other("nothing"))
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Add))
Lexeme(ShakespeareKit.Token.Lexemes.Other("snotty"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("stinking"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("half-witted"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("hog"))
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.Other("small"))
Lexeme(ShakespeareKit.Token.Lexemes.Other("toad"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
PrintCharacter
Exit(Set(["Romeo"]))
Enter(Set(["Juliet"]))
Scene("IV", "One small dog at a time.")
Exit(Set(["Hamlet"]))
Enter(Set(["Romeo"]))
Speaking("Juliet")
Lexeme(ShakespeareKit.Token.Lexemes.SecondPerson)
Lexeme(ShakespeareKit.Token.Lexemes.Be)
Lexeme(ShakespeareKit.Token.Lexemes.Compare(ShakespeareKit.Token.Lexemes.ComparisonType.Equals))
Lexeme(ShakespeareKit.Token.Lexemes.BinaryOperation(ShakespeareKit.Token.Lexemes.BinaryOperationType.Add))
Lexeme(ShakespeareKit.Token.Lexemes.SecondPersonReflexive)
Lexeme(ShakespeareKit.Token.Lexemes.Conjunction)
Lexeme(ShakespeareKit.Token.Lexemes.FirstPersonPossessive)
Lexeme(ShakespeareKit.Token.Lexemes.Other("chihuahua"))
Lexeme(ShakespeareKit.Token.Lexemes.Punctuation)
Jump("I")
Scene("V", "Fin.")
Exit(Set([]))